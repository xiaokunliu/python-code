#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""
原子:
普通字符作为原子
非打印字符作为原子
通用字符作为原子
原子表
"""
import re

"""
普通字符作为原子
"""
pattern = "yue"
string_url = "http://yum.iqianyue.com"
result = re.search(pattern,string_url)
print(result)


"""
非打印字符
"""
pattern = "\n"
url = """http://yum.iqianyue.com
http://baidu.com
"""
result = re.search(pattern,url)
print(result)


"""
通用字符作为原子
\w:匹配任意一个字母、数字或下划线
\W:匹配\w相反的字符
\d:匹配任意一个数字
\D:匹配\d相反的字符
\s:匹配任意的一个空白字符
\S:匹配除了空白字符以外的任意一个其他字符
"""

"""
原子表：由[]表示
"""

"""
元字符
. ^ $ * ? + {n} {n,} {n,m} | ()
"""

"""
模式选择符  |
"""


"""
模式单元符  ()
"""


"""
模式修正
I：忽略大小写
M：多行匹配
L:做本地化识别匹配
U:根据Unicode字符以及解析字符
S:让.匹配换行符,即用了该模式修正后,"."匹配就可以匹配任意字符了
"""

"""
贪婪模式与懒惰模式
pattern = "p.*y"  ## 贪婪模式
pattern = "p.*?y" ## 懒惰模式
"""

"""
match(a1,a2,a3):从源字符串的起始位置匹配一个模式，a1代表对应的正则表达式，a2代表对应的源字符，第三个参数是可选参数，代表对应的标志位，可以放模式修正
search():会扫描整个字符串并进行对应的匹配
全局匹配函数：
使用re.compile()对正则表达式进行预编译
编译后，使用findall()根据正则表达式从源字符串中将匹配的结果全部找出
sub()函数:
根据正则表达式来实现替换某些字符串的功能，
re.sub(pattern,rep,string,max)，
第一个参数为对应的正则表达式，第二个为要替换成的字符串，第三个参数为源字符串，第四个参数为可选项，代表最多替换的次数
"""


"""
===========================================================================================================
"""

"""
cookies
http.cookiejar
"""








